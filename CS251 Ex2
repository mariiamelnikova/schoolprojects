The user is going to input data about 0 or more students, followed by the input “# 0 0”. Each student input consists of their netid, midterm score, and final score. Example input:

lshu3 90 92
gma4 82 91
rahsan3 79 81
# 0 0
Your job is to write a C program (not C++) that inputs this data into an array of structs, prints them out in reverse order (1 per line) with each student’s exam average, followed by the overall averages for the midterm and final. Here’s the correct output for the input above:

rahsan3: 79,81,80.000000
gma4: 82,91,86.500000
lshu3: 90,92,91.000000
Midterm: 83.666667
Final: 88.000000
If no students are input, i.e. the input is simply

# 0 0 
Then the output should be

Midterm: N/A
Final: N/A
Declare an array of size 100 to store the student array; you may assume the input will never exceed 100 students. Each element of the array is a struct, defined as follows:

typedef struct Student
{
  char Netid[16];
  int  Midterm;
  int  Final;
} Student;
Note that space for the student’s Netid is already declared; assume 16 chars is sufficient. Since the string-based input is a single word (netid), it is safe to use scanf for obtaining the value. However, since we are mixing strings and integers, it’s best to discard the rest of the input line before calling scanf again. Here’s a good way to input data about one student:

char netid[16];
int  mid, fnl;

scanf("%s %d %d", netid, &mid, &fnl);
skipRestOfInput(stdin);
The function skipRestOfInput() is provided. Recall that strings in C are arrays of chars, and that in order to store the student’s netid into the array, you’ll need to use strcpy() to copy the string-based input value into the corresponding Netid field of the array:

strcpy(students[i].Netid, netid);
Your input loop should stop when the netid "#" is input. Since valid UIC netids start with a letter, it's sufficient to check the first character of the input netid to see if it's a '#':

while (netid[0] != '#')
Finally, note that the averages should be computed as real numbers, and output using %f. For example:

printf("Midterm: %f\n", midtermAverage);
/*main.c*/

// ignore stdlib warnings if working in Visual Studio:
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Student
{
  char Netid[16];
  int  Midterm;
  int  Final;
} Student;

// inputs and discards the remainder of the current line for the
// given input stream, including the EOL character(s):
void skipRestOfInput(FILE *stream)
{
  char restOfLine[256];
  int rolLength = sizeof(restOfLine) / sizeof(restOfLine[0]);

  fgets(restOfLine, rolLength, stream);
}

int main(int argc, char *argv[])
{
    Student students[100];
    char netid[16];
    int i = 0;
    int mid, fnl;
    double midtermAverage = 0.0;
    double finalAverage = 0.0;
    double studentAverage;
    int count = 0;
    scanf("%s %d %d", netid, &mid, &fnl);
    if(netid[0] == '#')
            {
                printf("Midterm: N/A\nFinal: N/A\n");
                exit(0);
            }
    while (netid[0] != '#' && i <= 100)
    {
                count += 1;
                midtermAverage += mid;
                finalAverage += fnl;
                skipRestOfInput(stdin);
                strcpy(students[i].Netid, netid);
                students[i].Midterm = mid;
                students[i].Final = fnl;
                scanf("%s %d %d", netid, &mid, &fnl);
                i++;
    }

     for (i = count - 1; i >= 0; i--)
    {
        double tempsum = students[i].Midterm + students[i].Final;
        studentAverage = tempsum / 2;
        printf("%s: %d,%d,%f\n", students[i].Netid, students[i].Midterm, students[i].Final, studentAverage);
    }

    printf("Midterm: %f\nFinal: %f\n", midtermAverage/count, finalAverage/count);

  return 0;
}


or when no numbers in final and midterm input

/*main.c*/

// ignore stdlib warnings if working in Visual Studio:
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Student
{
  char Netid[16];
  int  Midterm;
  int  Final;
} Student;

// inputs and discards the remainder of the current line for the
// given input stream, including the EOL character(s):
void skipRestOfInput(FILE *stream)
{
  char restOfLine[256];
  int rolLength = sizeof(restOfLine) / sizeof(restOfLine[0]);

  fgets(restOfLine, rolLength, stream);
}

int main(int argc, char *argv[])
{
    Student students[100];
    char netid[16];
    int i = 0;
    int mid = 0;
    int fnl = 0;
    double midtermAverage = 0.0;
    double finalAverage = 0.0;
    double studentAverage;
    int count = 0;
    scanf("%s", netid);
    if(netid[0] == '#')
            {
                //scanf("%d %d", &mid, &fnl);
                printf("Midterm: N/A\nFinal: N/A");
                exit(0);
            }
    scanf("%d %d", &mid, &fnl);
    while (netid[0] != '#' && i <= 100)
    {
                midtermAverage += mid;
                finalAverage += fnl;
                strcpy(students[i].Netid, netid);
                students[i].Midterm = mid;
                students[i].Final = fnl;
                scanf("%s", netid);
                count ++;
                if(netid[0] == '#')
                    {
                        break;
                    }
                scanf("%d %d", &mid, &fnl);
                skipRestOfInput(stdin);
                i++;
    }

     for (i = count - 1; i >= 0; i--)
    {
        double tempsum = students[i].Midterm + students[i].Final;
        studentAverage = tempsum / 2;
        printf("%s: %d, %d, %f\n", students[i].Netid, students[i].Midterm, students[i].Final, studentAverage);
    }

    printf("Midterm: %f\nFinal:%f\n", midtermAverage/count, finalAverage/count);

  return 0;
}
